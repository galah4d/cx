package gui

import "gfx"

// TODO : move to gfx ??

//-----------------------------------------------------------------------------
// Globals ...
//-----------------------------------------------------------------------------
var g_batches[] batch_s
var g_renderBatches[] batch_id

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
type batch_id struct {
	batch i32
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
type batch_s struct {
	texture gfx.Texture
	mesh MeshId
	alpha bool
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func invalid_batch() (out batch_id) {
	out.batch = -1
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func is_valid_batch(id batch_id) (out bool) {
	out = id.batch >= 0 && id.batch < len(g_batches)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func get_batch(texture gfx.Texture, alpha bool) (out batch_id) {

	out.batch = -1
	var i i32 = 0
	var batchCount i32 = len(g_batches)
	for i >= 0 {

		if (i < batchCount) {
			var textureName i32 = g_batches[i].texture.name
			var textureAlpha bool = g_batches[i].alpha
			if (textureName == texture.name && textureAlpha == alpha) {
				out.batch = i
			}
			i = i + 1
		} else {
			i = -1
		}
	}
	if (out.batch < 0) {

		var attributes []i32 // ##0 harcode
		attributes = []i32{3, 4, 2}

		out.batch = batchCount

		var batch batch_s
		batch.texture = texture
		batch.mesh = gfx.MeshLock(gl.TRIANGLES, attributes, 2048 * 3) // ##0 hardcode
		batch.alpha = alpha
		g_batches = append(g_batches, batch)
	}

	var renderBatchCount i32 = len(g_renderBatches)
	i = 0
	var found bool = false
	for i >= 0 {
		if (i < renderBatchCount) {
			if (g_renderBatches[i].batch == out.batch) {
				found = true
				i = -1
			} else {
				i = i + 1
			}
		} else {
			i = -1
		}
	}

	if (found == false) {
		//printf("BATCH_NOT FOUND %d\n", out.batch)
		g_renderBatches = append(g_renderBatches, out)
	}

	panicIfNot(is_valid_batch(out), "get_batch : invalid index")
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func clear_batches() {
	g_renderBatches = resize(g_renderBatches, 0)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func begin_batches() {
	var renderBatchCount i32 = len(g_renderBatches)
	var i i32 = 0;
	//printf("BEGIN_BATCHES %d\n", renderBatchCount)
	for i = 0; i < renderBatchCount; i = i + 1 {
		var batchId batch_id = g_renderBatches[i]
		//printf("BEGIN_BATCH %d/%d BATCH %d\n", i, renderBatchCount, batchId.batch)
		panicIfNot(is_valid_batch(batchId), "begin_batch : invalid batch")
		var meshId gfx.MeshId = g_batches[batchId.batch].mesh
		panicIfNot(gfx.IsValidMesh(meshId), "begin_batches : invalid mesh")
		gfx.MeshBegin(meshId)
	}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func end_batches() {
	var renderBatchCount i32 = len(g_renderBatches)
	var i i32 = 0;
	for i = 0; i < renderBatchCount; i = i + 1 {
		var batchId batch_id = g_renderBatches[i]
		panicIfNot(is_valid_batch(batchId), "end_batch : invalid batch")
		var meshId gfx.MeshId = g_batches[batchId.batch].mesh
		panicIfNot(gfx.IsValidMesh(meshId), "end_batches : invalid mesh")
		gfx.MeshEnd(meshId)
	}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func render_batches(alpha bool) {
	var renderBatchCount i32 = len(g_renderBatches)
	var i i32 = 0
	for i = 0; i < renderBatchCount; i = i + 1 {
		var batchId batch_id = g_renderBatches[i]
		panicIfNot(is_valid_batch(batchId), "render_batches : invalid batch")
		var batch i32 = batchId.batch
		var meshId gfx.MeshId = g_batches[batch].mesh
		panicIfNot(gfx.IsValidMesh(meshId), "render_batches : invalid mesh")
		if (gfx.MeshIsEmpty(meshId) == false) {
			var batchAlpha bool = g_batches[batch].alpha
			if (batchAlpha == alpha) {
				if (alpha == true) {
					gfx.enable_blending(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
				} else {
					gfx.disable_blending()
				}
				gfx.EffectUse(gfx.g_fxTexture)
				gfx.EffectAssignTexture(gfx.g_fxTexture, 0, g_batches[batch].texture.name)
				gfx.MeshRender(meshId)
			}
		}
	}
}


