package gui

import "mat"

// Globals ...
var g_controls []Control
var g_cursorPos mat.v2

// ControlId ...
type ControlId struct {
	control i32
}

// Control ...
type Control struct {
	id ControlId
	name str
	gui_type i32
	gui_index i32

	skin skin_id
	parent ControlId

	visible i32

	focusIndex i32
	focusable i32
	focused i32
	childFocused i32
	selected i32

	hovered i32

	dock i32
	align i32
	autosize i32
	autoscale i32

	position mat.v2
	size mat.v2
	scale mat.v2
	padding mat.v4
	spacing mat.v2

	renderPosition mat.v2
	children []ControlId
}

// InvalidControl ...
func InvalidControl() (out ControlId) {
	out.control = -1
}

// NewControlId ...
func NewControlId(control i32) (out ControlId) {
	out.control = control
	panicIfNot(IsValidControl(out), "invalid id")
}

// IsValidControl ...
func IsValidControl(id ControlId) (out bool) {
	out = id.control >= 0 && id.control < len(g_controls)
}

// ControlCreate ...
func ControlCreate(name str) (out ControlId) {
	out = controlCreate(name, GUI_CONTROL, len(g_controls))
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func controlCreate(name str, gui_type i32, gui_index i32) (out ControlId) {
	out.control = len(g_controls)

	var control Control

	control.id = out
	control.parent = InvalidControl()
	control.name = name
	control.gui_type  = gui_type
	control.gui_index = gui_index

	control.skin = invalid_skin()

	control.focusIndex = -1
	control.focusable = 0
	control.focused = 0

	control.visible = 1

	control.dock	  = DOCK_NONE
	control.align	 = ALIGN_NONE
	control.autosize  = AUTOSIZE_NONE
	control.autoscale = AUTOSCALE_NONE

	control.position = mat.v2_zero
	control.size	 = mat.v2_zero
	control.scale	= mat.v2_one
	control.padding  = mat.v4_zero
	control.spacing  = mat.v2_zero

	g_controls = append(g_controls, control)

	panicIfNot(IsValidControl(out), "invalid control")
	//ControlPrint("ControlCreate : ", out, true)
}

// ControlPrint ...
func ControlPrint(message str, id ControlId, printSkin bool) {
	panicIfNot(IsValidControl(id), "invalid control")
	var index i32 = id.control
	//if (index == 29 || index == 30) {
	printf("%s - %d - %s, Type %d, Index %d, Focusable %d, Focusindex %d, Focused %d, ChildFocused %d, Selected %d, Visible %d, Skin %d, Dock %d, Align %d, Autosize %d, Autoscale %d, Padding %f, %f, %f, %f, Position %f, %f, RenderPosition %f, %f, Size %f, %f, Scale %f, %f, Children %d\n",
		message,
		g_controls[index].id.control,
		g_controls[index].name,
		g_controls[index].gui_type,
		g_controls[index].gui_index,
		g_controls[index].focusable,
		g_controls[index].focusIndex,
		g_controls[index].focused,
		g_controls[index].childFocused,
		g_controls[index].selected,
		g_controls[index].visible,
		g_controls[index].skin.skin,
		g_controls[index].dock,
		g_controls[index].align,
		g_controls[index].autosize,
		g_controls[index].autoscale,
		g_controls[index].padding.x,
		g_controls[index].padding.y,
		g_controls[index].padding.z,
		g_controls[index].padding.w,
		g_controls[index].position.x,
		g_controls[index].position.y,
		g_controls[index].renderPosition.x,
		g_controls[index].renderPosition.y,
		g_controls[index].size.x,
		g_controls[index].size.y,
		g_controls[index].scale.x,
		g_controls[index].scale.y,
		len(g_controls[index].children))

	if (printSkin == true && is_valid_skin(g_controls[index].skin)) {
		skin_print("ControlPrint : ", g_controls[index].skin)
	}
	//}
}

// ControlSetSkin ...
func ControlSetSkin(id ControlId, skin skin_id) {
	panicIfNot(IsValidControl(id)   , "invalid id")
	panicIfNot(is_valid_skin(skin), "invalid skin")
	g_controls[id.control].skin = skin
}

// ControlSetDock ...
func ControlSetDock(id ControlId, dock i32) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].dock = dock
}

// ControlSetAlign ...
func ControlSetAlign(id ControlId, align i32) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].align = align
}

// ControlSetAutosize ...
func ControlSetAutosize(id ControlId, autosize i32) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].autosize = autosize
}

// ControlSetAutoscale ...
func ControlSetAutoscale(id ControlId, autoscale i32) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].autoscale = autoscale
}

// ControlSetPosition ...
func ControlSetPosition(id ControlId, position v2) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].position = position
}

// ControlSetSize ...
func ControlSetSize(id ControlId, size v2) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].size = size
}

// ControlSetBounds ...
func ControlSetBounds(id ControlId, bounds v4) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].position = mat.v4_xy(bounds)
	g_controls[id.control].size = mat.v4_zw(bounds)
}

// ControlSetScale ...
func ControlSetScale(id ControlId, scale v2) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].scale = scale
}

// ControlSetVisible ...
func ControlSetVisible(id ControlId, visible i32) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].visible = visible
}

// ControlSetSelected ...
func ControlSetSelected(id ControlId, selected i32) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].selected = selected
}

// ControlAddChild ...
func ControlAddChild(parent ControlId, child ControlId) {
	panicIfNot(IsValidControl(parent), "invalid parent")
	panicIfNot(IsValidControl(child), "invalid child")
	var count i32 = len(g_controls[parent.control].children)
	g_controls[child.control].focusIndex = count
	g_controls[child.control].parent = parent
	g_controls[parent.control].children = append(g_controls[parent.control].children, child)
}

// ControlClearChildren ...
func ControlClearChildren(id ControlId) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].children = resize(g_controls[id.control].children, 0)
}

// ControlSetPadding ...
func ControlSetPadding(id ControlId, padding mat.v4) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].padding = padding // ##1 id viewport resize
}

// ControlSetSpacing ...
func ControlSetSpacing(id ControlId, spacing mat.v2) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].spacing = mat.v2_mul(spacing, mat.v2_(1.0, gfx.gfx_ratio_y)) // ##1 id viewport resize
}

// ControlSetFocusIndex ...
func ControlSetFocusIndex(id ControlId, value i32) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].focusIndex = value
}

// ControlSetFocusable ...
func ControlSetFocusable(id ControlId, value i32) {
	panicIfNot(IsValidControl(id), "invalid id")
	g_controls[id.control].focusable = value
	//ControlPrint("SET_FOCUSABLE : ", id, false)
}

// ControlSetParentFocus ...
func ControlSetParentFocus(id ControlId, child ControlId, value i32) {
	//printf("set_parent_focus : %d\n", id.control)
	panicIfNot(IsValidControl(id), "invalid id")
	var parent ControlId = g_controls[id.control].parent
	if (IsValidControl(parent)) {
		g_controls[parent.control].childFocused = value
		ControlSetParentFocus(parent, child, value)

		var guiType i32 = g_controls[parent.control].gui_type
		var guiIndex i32 = g_controls[parent.control].gui_index

		if (guiType == GUI_INVALID) {
			panicIfNot(false, "invalid gui type (GUI_INVALID)")
		} else if (guiType == GUI_CONTROL) {
			var dummy i32 = 0
		} else if (guiType == GUI_SCREEN) {
			var dummy i32 = 0
		} else if (guiType == GUI_PICTURE) {
			var dummy i32 = 0
		} else if (guiType == GUI_LABEL) {
			var dummy i32 = 0
		} else if (guiType == GUI_PARTITION) {
			var dummy i32 = 0
		} else if (guiType == GUI_KEYBOARD) {
			var dummy i32 = 0
		} else if (guiType == GUI_WINDOW) {
			var dummy i32 = 0
		} else if (guiType == GUI_GRAPH) {
			var dummy i32 = 0
		} else if (guiType == GUI_SPLITTER) {
			var dummy i32 = 0
		} else if (guiType == GUI_LIST) {
			list_child_focused(list_id_(parent, guiIndex), child, value)
		} else if (guiType == GUI_SCROLLER) {
			var dummy i32 = 0
		} else if (guiType == GUI_LIFTER) {
			var dummy i32 = 0
		} else if (guiType == GUI_BINDER) {
			var dummy i32 = 0
		} else if (guiType == GUI_VECTOR) {
			var dummy i32 = 0
		} else if (guiType == GUI_COMBO) {
			var dummy i32 = 0
		} else {
			printf("GUI TYPE %d\n", guiType)
			panicIfNot(false, "unknown gui type")
		}

		//ControlPrint("ControlSetParentFocus : ", parent, false)
	}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
/*func control_set_parent_select(id ControlId, value i32) {
	//printf("set_parent_focus : %d\n", id.control)
	panicIfNot(IsValidControl(id), "ControlSetParentFocus : invalid id")
	var parent ControlId = g_controls[id.control].parent
	if (IsValidControl(parent)) {
		g_controls[parent.control].childSelected = value
		control_set_parent_select(parent, value)
	}
}*/

// ControlParentVisible ...
func ControlParentVisible(id ControlId) (out bool) {
	panicIfNot(IsValidControl(id), "invalid id")
	var visible i32 = g_controls[id.control].visible
	if (visible <= 0) {
		out = false
	} else {
		out = true
		var parent ControlId = g_controls[id.control].parent
		if (IsValidControl(parent)) {
			out = ControlParentVisible(parent)
		}
	}
}

// ControlHovered ...
func ControlHovered(id ControlId) (out i32) {
	panicIfNot(IsValidControl(id), "invalid id")
	out = 0

	var position mat.v2 = g_controls[id.control].renderPosition
	var size mat.v2 = g_controls[id.control].size

	var left f32 = position.x
	var right f32 = left + size.x
	var bottom f32 = position.y
	var top f32 = bottom + size.y
	if (g_cursorPos.x >= left && g_cursorPos.x <= right &&
		g_cursorPos.y >= bottom && g_cursorPos.y <= top) {
		out = 1
	}
	/*if (id.control == 158) {
		ControlPrint("CONTROL_HOVERED : ", id, false)
		printf("BOUNDS %f, %f, %f, %f, POS %f, %f", left, right, bottom, top, g_cursorPos.x, g_cursorPos.y)
	}*/
}

// ControlFocused ...
func ControlFocused(id ControlId) (out i32) { // ##pending issue bool
	out = 0
	panicIfNot(IsValidControl(id), "invalid id")
	var focused i32 = g_controls[id.control].focused
	if (focused > 0) {
		out = focused
	}

	var childFocused i32 = g_controls[id.control].childFocused
	if (childFocused > 0) {
		out = childFocused
	}
}

