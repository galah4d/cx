package gui

//-----------------------------------------------------------------------------
// KEYBOARD
//-----------------------------------------------------------------------------
var g_keyboards[] keyboard_s

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
type keyboard_id struct {
	base ControlId
	keyboard i32
}

type mapping_s struct {
	low []str
	high []str
	codes []i32
	keys []i32
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
type keyboard_s struct {
	id keyboard_id
	keys []LabelId
	caps bool
	dvorak mapping_s
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func keyboard_id_(base ControlId, keyboard i32) (out keyboard_id) {
	out.base = base
	out.keyboard = keyboard
	panicIfNot(is_valid_keyboard(out), "invalid id")
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func is_valid_keyboard(id keyboard_id) (out bool) {
	out = id.keyboard >= 0 && id.keyboard < len(g_keyboards) && IsValidControl(id.base)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func create_keyboard(name str) (out keyboard_id) {
	out.keyboard = len(g_keyboards)
	out.base = controlCreate(name, GUI_KEYBOARD, out.keyboard)

	var keyboard keyboard_s
	keyboard.id = out

	keyboard.dvorak.low = []str{"<", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "[", "]",
								" ", "'", ",", ".", "p", "y", "f", "g", "c", "r", "l", "/", "=",
								" ", "a", "o", "e", "u", "i", "d", "h", "t", "n", "s", "-", "\\",
								"`", ";", "q", "j", "k", "x", "b", "m", "w", "v", "z", " ", " " }

	keyboard.dvorak.high = []str { ">", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "{", "}",
								   " ", "X", "<", ">", "P", "Y", "F", "G", "C", "R", "L", "?", "+",
								   " ", "A", "O", "E", "U", "I", "D", "H", "T", "N", "S", "_", "|",
								   "~", ":", "Q", "J", "K", "X", "B", "M", "W", "V", "Z", " ", " " }

	keyboard.dvorak.codes = []i32 { 940, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
									-1, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
									-1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51,
									49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1 }

	keyboard.dvorak.keys= []i32 {161, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 45, 61,
									-1, 81, 87, 69, 82, 84, 89, 85, 73, 79, 80, 91, 93,
									-1, 65, 83, 68, 70, 71, 72, 74, 75, 76, 59, 39, 92,
									96, 90, 88, 67, 86, 66, 78, 77, 44, 46, 47, -1, -1 }


	var count i32 = len(keyboard.dvorak.low)
	for i := 0; i < count; i++ {
		var label LabelId = LabelCreate(sprintf("key_%d", i))
		ControlAddChild(out.base, label.base)
		ControlSetSkin(label.base, g_blueSkin)
		//ControlSetFocusable(label.base, 1)
		//ControlSetAutoscale(label.base, AUTOSCALE)
		LabelSetSize(label, g_fontSizeHeader)
		LabelSetAlign(label, ALIGN_CENTER)
		LabelSetFont(label, g_boldFont)
		LabelSetColor(label, g_white)
		keyboard.keys = append(keyboard.keys, label)
	}

	ControlSetPadding(out.base, mat.v4_(5.0, 5.0, 5.0, 5.0))
	g_keyboards = append(g_keyboards, keyboard)

	panicIfNot(is_valid_keyboard(out), "invalid id")
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func keyboard_get_key_index(id keyboard_id, key i32) (index i32) {
	panicIfNot(is_valid_keyboard(id), "invalid id")

	index = -1
	var keys []i32 = g_keyboards[id.keyboard].dvorak.keys
	var count i32 = len(keys)
	for i := 0; i < count; i++ {
		if keys[i] == key {
			index = i
			i = count
		}
	}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func keyboard_process_event(id keyboard_id, event *app.Event) (out i32) {
	panicIfNot(is_valid_keyboard(id), "invalid id")
	out = ControlProcessEvent(id.base, event)

	var action i32 = (*event).keyboard.action
	var key i32 = (*event).keyboard.key
	var mods i32 = (*event).keyboard.mods

	if key == app.KEYCODE_SHIFT{
		if action == app.KEY_PRESS {
			g_keyboards[id.keyboard].caps = true
			out = app.EVENT_CONSUMED
		} else if action == app.KEY_RELEASE {
			g_keyboards[id.keyboard].caps = false
			//out = app.EVENT_CONSUMED
		}
	} else {
		var selected i32 = -1
		if action == app.KEY_PRESS {
			selected = 1
		} else if action == app.KEY_RELEASE {
			selected = 0
		}

		if selected == 0 || selected == 1 {
			var index i32 = keyboard_get_key_index(id, key)
			if index >= 0 && index < len(g_keyboards[id.keyboard].keys) {
				var label LabelId = g_keyboards[id.keyboard].keys[index]
				ControlSetSelected(label.base, selected)
			}
		}
	}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func keyboard_resize(id keyboard_id) () {
	panicIfNot(is_valid_keyboard(id), "invalid id")

	var rowCount i32 = 13
	var lineCount i32 = 4

	var paddingX f32 = 5.0
	var paddingY f32 = 5.0

	var fRowCount f32 = i32.f32(rowCount)
	var fLineCount f32 = i32.f32(lineCount)

	var keyWidth f32 = 50.0
	var keyHeight f32 = 50.0

	var height f32 = fLineCount * keyHeight + (fLineCount + 1.0) * paddingX
	var width f32 = fRowCount * keyWidth + (fRowCount + 1.0) * paddingY

	var w f32 = width
	var h f32 = height
	var x f32 = 0.0
	var y f32 = 0.0

	var mapping []str = g_keyboards[id.keyboard].dvorak.low
	if g_keyboards[id.keyboard].caps {
		mapping = g_keyboards[id.keyboard].dvorak.high
	}

	//var count i32 = 0
	var i i32 = 0
	var j i32 = 0
	for i = 0; i < rowCount; i = i + 1 {
		for j = 0; j < lineCount; j = j + 1 {
			var kx f32 = paddingX + x + i32.f32(i) * (paddingX + keyWidth)
			var ky f32 = paddingY + y + i32.f32(j) * (paddingY + keyHeight)
			var kw f32 = keyWidth
			var kh f32 = keyHeight

			var l i32 = (lineCount - 1 - j) * rowCount + i
			var label LabelId = g_keyboards[id.keyboard].keys[l]

			ControlSetPosition(label.base, mat.v2_(kx, ky))
			ControlSetSize(label.base, mat.v2_(kw, kh))
			LabelSetText(label, mapping[l])
			//gfx.MeshAppendOrthoQuad(g_opaqueVertexColoredTriangles, mat.v4_(kx, ky, kw, kh), mat.v4_(0.0, 0.0, 1.0, 1.0), gui.g_blue)
			//gfx.append_text(g_alphaTexturedTriangles, g_skycoinFontTexture, "skycoin", kx, ky, gui.g_lightBlue, "A", false, false)
			//gfx.append_rect(g_opaqueVertexColoredLines, mat.v4_(kx, ky, kw, kh), gui.g_blue, gui.g_blue, gui.g_blue, gui.g_blue)
			//count = count + 1
		}
	}

	ControlResize(id.base)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func keyboard_render(id keyboard_id, clip mat.v4, stack i32) () {
	panicIfNot(is_valid_keyboard(id), "invalid id")
	ControlRender(id.base, clip, stack)
}


