package gui

//-----------------------------------------------------------------------------
// PARTITION
//-----------------------------------------------------------------------------
var g_partitions [] partition_s

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
type partition_id struct {
	base ControlId
	partition i32
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
type partition_s struct {
	id partition_id
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func partition_id_(base ControlId, partition i32) (out partition_id) {
	out.base = base
	out.partition = partition
	panicIfNot(is_valid_partition(out), "invalid id")
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func is_valid_partition(id partition_id) (out bool) {
	out = id.partition >= 0 && id.partition < len(g_partitions) && IsValidControl(id.base)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func create_partition(name str) (out partition_id) {
	out.partition = len(g_partitions)
	out.base = controlCreate(name, GUI_PARTITION, out.partition)

	var partition partition_s
	partition.id = out

	g_partitions = append(g_partitions, partition)
	panicIfNot(is_valid_partition(out), "invalid id")
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func partition_process_event(id partition_id, event *app.Event) (out i32) {
	panicIfNot(is_valid_partition(id), "invalid id")
	out = ControlProcessEvent(id.base, event)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func partition_resize(id partition_id) () {
	panicIfNot(is_valid_partition(id), "invalid id")
	ControlResize(id.base)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func partition_render(id partition_id, clip mat.v4, stack i32) () {
	panicIfNot(is_valid_partition(id), "invalid id")
	ControlRender(id.base, clip, stack)
}


