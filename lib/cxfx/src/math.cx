//-----------------------------------------------------------------------------
// math
//-----------------------------------------------------------------------------
package mat

//-----------------------------------------------------------------------------
// float64
//-----------------------------------------------------------------------------
var F64_MAX f64 =  10000000000000.0D // ##0 fixme
var F64_MIN f64 = -10000000000000.0D

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func min_f64(a f64, b f64) (out f64) {
	out = a
	if (b < a) {
		out = b
	}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func max_f64(a f64, b f64) (out f64) {
	out = a
	if (b > a) {
		out = b
	}
}

//-----------------------------------------------------------------------------
// float32
//-----------------------------------------------------------------------------
var FLOAT_MAX f32 =  1000000000.0 // ##0 fixme
var FLOAT_MIN f32 = -1000000000.0

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func min(a f32, b f32) (out f32) {
	out = a
	if (b < a) {
		out = b
	}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func max(a f32, b f32) (out f32) {
	out = a
	if (b > a) {
		out = b
	}
}

//-----------------------------------------------------------------------------
// vec2
//-----------------------------------------------------------------------------
type v2 struct {
	x f32
	y f32
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_isnan(v v2) (out bool) {
	out = f32.isnan(v.x) || f32.isnan(v.y)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_(x f32, y f32) (out v2) {
	out.x = x
	out.y = y
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
var v2_zero v2 = v2_(0.0, 0.0)
var v2_one  v2 = v2_(1.0, 1.0)

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_min(a v2, b v2) (out v2) {
	out = v2_(min(a.x, b.x), min(a.y, b.y))
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_add(a v2, b v2) (out v2) {
	out.x = a.x + b.x
	out.y = a.y + b.y
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_sub(a v2, b v2) (out v2) {
	out.x = a.x - b.x
	out.y = a.y - b.y
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_mul(a v2, b v2) (out v2) {
	out.x = a.x * b.x
	out.y = a.y * b.y
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_div(a v2, b v2) (out v2) {
	out.x = a.x / b.x
	out.y = a.y / b.y
}

//-----------------------------------------------------------------------------
// vec4
//-----------------------------------------------------------------------------
type v4 struct {
	x f32
	y f32
	z f32
	w f32
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v4_(x f32, y f32, z f32, w f32) (out v4) {
	out.x = x
	out.y = y
	out.z = z
	out.w = w
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
var v4_zero v4 = v4_(0.0, 0.0, 0.0, 0.0)

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v4_v2v2(xy v2, zw v2) (out v4) {
	out.x = xy.x
	out.y = xy.y
	out.z = zw.x
	out.w = zw.y
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v4_xy(in v4) (out v2) {
	out.x = in.x
	out.y = in.y
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v4_zw(in v4) (out v2) {
	out.x = in.z
	out.y = in.w
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v4_mul(a v4, b v4) (out v4) {
	out.x = a.x * b.x
	out.y = a.y * b.y
	out.z = a.z * b.z
	out.w = a.w * b.w
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v4_mix(a v4, b v4, t f32) (out v4) {
	out.x = a.x + t * (b.x - a.x)
	out.y = a.y + t * (b.y - a.y)
	out.z = a.z + t * (b.z - a.z)
	out.w = a.w + t * (b.w - a.w)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func rgba_ui8(x i32, y i32, z i32, w i32) (out v4) {
	out.x = i32.f32(x) / 255.0
	out.y = i32.f32(y) / 255.0
	out.z = i32.f32(z) / 255.0
	out.w = i32.f32(w) / 255.0
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

