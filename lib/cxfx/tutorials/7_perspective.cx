package main

import "app"
import "fps"
import "mat"
import "gfx"
import "gl" // ##1 remove gl dependency

var exit bool // ISSUE : panic when Application is global
var dx f32 = 0.0
var dy f32 = 0.0
var dz f32 = -50.0

var ry f32 = 0.0

func KeyboardCallback(window str, key i32, scancode i32, action i32, mods i32) () {
	printf("KeyboardCallback : window %s, key %d, scancode %d, action %d, mods %d\n", window, key, scancode, action, mods)
	if key == 256 && action == 1 {
		exit = true
	}
	if key == 262 {
		dx = dx + 1.0
	}
	if key == 263 {
		dx = dx - 1.0
	}
	if key == 264 {
		if mods > 0 {
			dy = dy + 0.1
		} else {
			dz = dz + 0.1
		}
	}
	if key == 265 {
		if mods > 0 {
			dy = dy - 0.1
		} else {
			dz = dz - 0.1
		}
	}
}

func MouseButtonCallback(window str, key i32, action i32, mods i32) () {
	printf("MouseButtonCallback : window %s, key %d, action %d, mods %d\n", window, key, action, mods)
}

func MousePositionCallback(window str, x f64, y f64) () {
	printf("MousePositionCallback : window %s, x %f, y %f\n", window, x, y)
}

func main()() {
	var o app.Options
	o.width = 800
	o.height = 600
	o.fps = 60
	o.Parse()

	var f fps.Framerate
	f.Init(i32.f64(o.fps))

	var prfSwap fps.ProfileId = fps.CreateProfile("swap")
	var prfFrame fps.ProfileId = fps.CreateProfile("frame")
	var prfUpdate fps.ProfileId = fps.CreateProfile("update")
	var prfRender fps.ProfileId = fps.CreateProfile("render")

	var a app.Application
	a.Init(o, "Perspective Tutorial", "mainWindow", 2, 1)
	a.SetKeyboardCallback("main", "KeyboardCallback")
	a.SetMouseButtonCallback("main", "MouseButtonCallback")
	a.SetMousePositionCallback("main", "MousePositionCallback")

	gfx.Init(o.width, o.height, o.dataDir)

	var width f32 = i32.f32(o.width)
	var height f32 = i32.f32(o.height)

	var texture gfx.Texture = gfx.TextureCreate(sprintf("%s/textures/Skycoin-Cloud-BW-Vertical-on_black@2x.png", o.dataDir),
		gl.LINEAR, gl.LINEAR, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, 0, 0)

	var view []f32
	view = mat.IdentityMatrix(view)

	var projection []f32
	projection = mat.ProjectionMatrix(projection, 0.1, 10000.0, 0.5, height / width)

	var depthBuffer i32 = gfx.create_depth_buffer(gl.DEPTH_COMPONENT, o.width, o.height)

	var screen gfx.MeshId = gfx.MeshLock(gl.TRIANGLES, gfx.g_vertexColorAttributes, 6)
	var mesh gfx.MeshId = gfx.MeshLock(gl.TRIANGLES, gfx.g_vertexColorAttributes, 36)

	var rotate []f32
	var translate []f32
	var world [] f32

	for app.Running(&a) { // ISSUE : can't use member function
		f.BeginUpdate(2.0D)
		fps.Start(prfSwap)
		{
			a.BeginFrame()
			fps.Start(prfFrame)
			{
				// Update ...
				fps.Start(prfUpdate)
				if exit {
					a.Exit()
				}

				ry = ry + f64.f32(f.deltaTime)

				rotate = resize(rotate, 0)
				rotate = mat.RotationY(rotate, ry)

				translate = resize(translate, 0)
				translate = mat.Translate(translate, dx, dy, dz)

				world = resize(world, 0)
				world = mat.Multiply(world, rotate, translate)

				gfx.MeshBegin(screen)
				gfx.MeshAppendQuad(screen,
					gfx.gfx_viewportBounds,
					mat.v4_(0.0, 0.0, 1.0, 1.0),
					mat.v4_(1.0, 1.0, 1.0, 1.0),
					gfx.gfx_viewportBounds, 0.0)
				gfx.MeshEnd(screen)

				gfx.MeshBegin(mesh)
				gfx.MeshAppendCube(mesh,
					mat.v3_(0.0, 0.0, 0.0),
					mat.v3_(10.0, 10.0, 10.0),
					mat.v4_(1.0, 1.0, 1.0, 1.0))
				gfx.MeshEnd(mesh)
				fps.Stop(prfUpdate)

				// Render ...
				fps.Start(prfRender)
				var offscreen gfx.Target = gfx.lock_target(o.width, o.height)
				gfx.bind_framebuffer(offscreen.framebuffer)
				gfx.bind_depthbuffer(depthBuffer)
				gfx.disable_blending()
				gfx.depth_state(true, gl.LESS, true)
				gfx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, mat.v4_(0.3, 0.5, 0.6, 1.0), 1.0D, 0)
				gfx.EffectUse(gfx.g_fxPerspectiveTexture)
				gfx.EffectAssignTexture(gfx.g_fxPerspectiveTexture, 0, texture.name)
				gfx.EffectAssignMatrix4(gfx.g_fxPerspectiveTexture, 0, world, false)
				gfx.EffectAssignMatrix4(gfx.g_fxPerspectiveTexture, 1, view, false)
				gfx.EffectAssignMatrix4(gfx.g_fxPerspectiveTexture, 2, projection, false)
				gfx.MeshRender(mesh)
				gfx.bind_depthbuffer(0)
				gfx.bind_stencilbuffer(0)

				gfx.bind_framebuffer(0)
				gfx.clear(gl.COLOR_BUFFER_BIT, mat.v4_(0.0, 0.0, 0.0, 0.0), 0.0D, 0)
				gfx.color_write(true, true, true, true)
				gfx.disable_depth()
				gfx.disable_stencil()
				gfx.disable_blending()
				gfx.EffectUse(gfx.g_fxTexture)
				gfx.EffectAssignTexture(gfx.g_fxTexture, 0, offscreen.texture.name)
				gfx.MeshRender(screen)
				gfx.unlock_target(offscreen)
				fps.Stop(prfRender)
			}
			fps.Stop(prfFrame)
			a.EndFrame()
		}
		fps.Stop(prfSwap)
		f.EndUpdate()
	}

	gfx.MeshUnlock(screen)
	gfx.MeshUnlock(mesh)

	gfx.Free()
}
