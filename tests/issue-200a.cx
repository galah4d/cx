package main

type Point struct {
	x i32
	y i32
}

func testArrayPnts (pnts [2][2]Point) {}
func testPointerPnts (num *Point) {}
func testPointerLevelsPnts (num **Point) {}
func testSlicePnts (slc [][]Point) {}
func testArrayPointerPnts (pnums [3]*Point) {}
func returnSlicePnts () (slc [][]Point) {}

func testArray (byts [5][5]byte) {}
func testPointer (num *i32) {}
func testPointerLevels (num **i32) {}
func testSlice (slc [][]i32) {}
func testArrayPointer (pnums [3]*i32) {}

func returnSlice () (slc [][]i32) {}

func main () {
	var bar [5][5]byte
	bar[0] = [5]byte{1B, 2B, 3B, 4B, 5B}
	bar[1] = [5]byte{1B, 2B, 3B, 4B, 5B}

	testArray(bar)
	
	var num i32
	num = 5
	
	testPointer(&num)

	var ppnum **i32
	
	testPointerLevels(ppnum)

	var tss [][]i32
	var ts []i32
	ts = []i32{1, 2, 3}
	tss = append(tss, ts)
	testSlice(tss)

	testSlice(returnSlice())

	var pnums [3]*i32
	n1 := 1
	n2 := 2
	n3 := 3

	pnums[0] = &n1
	pnums[1] = &n2
	pnums[2] = &n3

	testArrayPointer(pnums)

	// testing for standard library functions
	i32.print(*(pnums[0]))

	var pnt Point
	pnt.x = 10
	pnt.y = 20
	
	var pnts [2][2][2]Point
	pnts[0][0][0] = pnt

	testArrayPnts(pnts[0])
	testPointerPnts(&pnt)

	var ppnts **Point
	testPointerLevelsPnts(ppnts)

	var slcPnts [][][]Point
	testSlicePnts(slcPnts[0])

	var apPnts [3]*Point
	testArrayPointerPnts(apPnts)

	testSlicePnts(returnSlicePnts())
}
