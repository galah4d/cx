package main

type Point struct {
	x i32
	y i32
}

func testArrayPnts (pnts [1][2]Point) {}
func testPointerPnts (num *Point) {}
func testPointerLevelsPnts (num **Point) {}
func testSlicePnts (slc [][]Point) {}
func testArrayPointerPnts (pnums [3]*Point) {}
func returnSlicePnts () (slc []Point) {}

func testArray (byts [5][5]byte) {}
func testPointer (num *i32) {}
func testPointerLevels (num **i32) {}
func testSlice (slc [][]i32) {}
func testArrayPointer (pnums [3]*i32) {}

func returnSlice () (slc [][]i32) {}

func main () {
	var bar [5]byte
	bar = [5]byte{1B, 2B, 3B, 4B, 5B}

	testArray(bar)
	
	var num i32
	num = 5

	// it should be &num
	testPointer(num)

	var pnum *i32
	testPointerLevels(pnum)

	var ts []i32
	ts = []i32{1, 2, 3}
	// it should be [][]i32
	testSlice(ts)

	testSlice(returnSlice())

	// it should be [3]*i32
	var pnums [4]*i32
	n1 := 1
	n2 := 2
	n3 := 3

	pnums[0] = &n1
	pnums[1] = &n2
	pnums[2] = &n3

	testArrayPointer(pnums)

	// it should be *(pnums[0])
	i32.print(pnums[0])

	var pnt Point
	pnt.x = 10
	pnt.y = 20
	
	var pnts [2][1][2]Point
	pnts[0][0][0] = pnt

	// it should be pnts[0]
	testArrayPnts(pnts[0][0])

	// it should be &pnt
	testPointerPnts(pnt)

	// it should be **Point
	var ppnts ***Point
	testPointerLevelsPnts(ppnts)

	var slcPnts [][][]Point
	// it should be slcPnts[0]
	testSlicePnts(slcPnts)

	var apPnts [3]*Point
	// it should be apPnts
	testArrayPointerPnts(apPnts[0])

	// returnSlicePnts declared to return []Point; it should be [][]Point
	testSlicePnts(returnSlicePnts())
}
