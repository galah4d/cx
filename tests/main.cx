package main

import "os"
import "cx"
import "time"

var VERBOSE_NONE	 i32 = 0
var VERBOSE_SUCCESS  i32 = 1
var VERBOSE_STDERR   i32 = 2
var VERBOSE_FAILURE  i32 = 4
var VERBOSE_SKIPPED  i32 = 8
var VERBOSE_FULL	 i32 = VERBOSE_SUCCESS | VERBOSE_STDERR | VERBOSE_FAILURE | VERBOSE_SKIPPED


var TEST_NONE   i32 = 0
var TEST_STABLE i32 = 1
var TEST_ISSUE  i32 = 2
var TEST_GUI    i32 = 4
var TEST_ALL    i32 = TEST_STABLE | TEST_ISSUE | TEST_GUI

var g_testCount i32 = 0
var g_testSuccess i32 = 0
var g_testSkipped i32 = 0

var g_workingDir str = ""
var g_cxPath str = "cx"
var g_verbose i32 = VERBOSE_FAILURE
var g_noGui bool = false
var g_enabledTests i32 = TEST_ALL

func addTestFlags(arg str, pattern str, filterFlags *i32) (success bool) {
	success = false
	var filterList str = ""
	var filterMatch bool = false
	if getArgValueStr(arg, pattern, &filterList, &filterMatch) {
		var index i32 = 0
		for index >= 0 {
			index = str.index(filterList, ",")
			var filter str = filterList
			if index >= 0 {
				filter = str.substr(filterList, 0, index)
				filterList = str.substr(filterList, index + 1, len(filterList))
			} else {
				filterList = ""
			}
			filter = str.trimspace(filter)
			if addTestFlag(filterFlags, filter) {
				success = true
			} else {
				printf("invalid option value %s\n", arg)
				os.Exit(cx.PANIC)
			}
		}
	}
}

func addTestFlag(filterFlags *i32, filter str) (success bool) {
	success = false
	var tmpF i32 = *filterFlags
	if filter == "all" {
		tmpF = tmpF | TEST_ALL
		success = true
	} else {
		if filter == "stable" {
			tmpF = tmpF | TEST_STABLE
			success = true
		} else if filter == "issue" {
			tmpF = tmpF | TEST_ISSUE
			success = true
		} else if filter == "gui" {
			tmpF = tmpF | TEST_GUI
			success = true
		}
	}
	*filterFlags = tmpF
}

func printTestFlags(name str, filter i32) {
	printf("%s : %d : ", name, filter)
	if filter > 0 {
		if (filter & TEST_STABLE) == TEST_STABLE {
			printf("stable, ")
			filter = filter & (-1 ^ TEST_STABLE)
		}
		if (filter & TEST_ISSUE) == TEST_ISSUE {
			printf("issue, ")
			filter = filter & (-1 ^ TEST_ISSUE)
		}
		if (filter & TEST_GUI) == TEST_GUI {
			printf("gui, ")
			filter = filter & (-1 ^ TEST_GUI)
		}

		if (filter > 0) {
			printf("invalid filter %s : %d\n", name, filter)
			os.Exit(cx.PANIC)
		}
	} else {
		printf("none")
	}
	printf("\n\n")
}

func matchArg(arg str, pattern str, match *bool) (out bool) {
	out = false
	var argLen i32 = len(arg)
	var patternLen i32 = len(pattern)
	if (argLen >= patternLen) {
		name := str.substr(arg, 0, patternLen)
		if (name == pattern) {
			if *match {
				printf("duplicate arg %s\n", arg)
				os.Exit(cx.PANIC)
			}
			*match = true
			out = true
		}
	}
}

func getArgValueStr(arg str, pattern str, value *str, match *bool) (out bool) {
	var matchName bool = matchArg(arg, pattern, match)
	if matchName {
		var argLen i32 = len(arg)
		var patternLen i32 = len(pattern)
		if argLen > patternLen {
			*value = str.substr(arg, patternLen, argLen)
			out = true
		}
	}
}

func getArgValueI32(arg str, pattern str, value *i32, match *bool) (out bool) {
	var strValue str = ""
	out = getArgValueStr(arg, pattern, &strValue, match)
	if out {
		var i32Value i32 = str.i32(strValue)
		*value = i32Value
	}
}

func prettyOsCode(code i32) (out str) {
	if (code == os.RUN_SUCCESS) {
		out = "os.RUN_SUCCESS"
	} else if (code == os.RUN_EMPTY_CMD) {
		out = "os.RUN_EMPTY_CMD"
	} else if (code == os.RUN_PANIC) {
		out = "os.RUN_PANIC"
	} else if (code == os.RUN_START_FAILED) {
		out = "os.RUN_START_FAILED"
	} else if (code == os.RUN_WAIT_FAILED) {
		out = "os.RUN_WAIT_FAILED"
	} else if (code == os.RUN_TIMEOUT) {
		out = "os.RUN_TIMEOUT"
	} else {
		out = "unknown os.Run exit code"
	}
}

func prettyCxCode(code i32) (out str) {
	if (code == cx.SUCCESS) {
		out = "cx.SUCCESS"
	} else if (code == cx.RUNTIME_ERROR) {
		out = "cx.RUNTIME_ERROR"
	} else if (code == cx.PANIC) {
		out = "cx.PANIC"
	} else if (code == cx.COMPILATION_ERROR) {
		out = "cx.COMPILATION_ERROR"
	} else if (code == cx.INTERNAL_ERROR) {
		out = "cx.INTERNAL_ERROR"
	} else if (code == cx.ASSERT) {
		out = "cx.ASSERT"
	} else {
		out = "unknown cx exit code"
	}
}

func runTestEx(cmd str, exitCode i32, desc str, filter i32, timeoutMs i32) () {
	if (g_enabledTests & filter) == filter {
		cmd = sprintf("%s %s", g_cxPath, cmd)
		var runError i32 = 0
		var cmdError i32 = 0
		var stdOut str

		var padding str
		if (g_testCount < 10) {
			padding = "  "
		} else if (g_testCount < 100) {
			padding = " "
		}
		var start i64 = time.UnixMilli()
		runError, cmdError, stdOut = os.Run(cmd, 2048, timeoutMs, g_workingDir)
		var end i64 = time.UnixMilli()
		var deltaMs i32 = i64.i32(end - start)
		if (runError != 0 && (runError != os.RUN_TIMEOUT || timeoutMs <= 0)) {
			if ((g_verbose & VERBOSE_FAILURE) == VERBOSE_FAILURE) {
				printf("#%s%d | FAILED  | %dms | '%s' | os.Run exited with code %s (%d) | %s\n",
					padding, g_testCount, deltaMs, cmd, prettyOsCode(runError), runError, desc)
			}
			if ((g_verbose & VERBOSE_STDERR) == VERBOSE_STDERR) {
				printf("%s\n", stdOut)
			}
		} else if (cmdError != exitCode) {
			if ((g_verbose & VERBOSE_FAILURE) == VERBOSE_FAILURE) {
				printf("#%s%d | FAILED  | %dms | '%s' | expected %s (%d) | got %s (%d) | %s\n",
					padding, g_testCount, deltaMs, cmd, prettyCxCode(exitCode), exitCode, prettyCxCode(cmdError), cmdError, desc)
			}
			if ((g_verbose & VERBOSE_STDERR) == VERBOSE_STDERR) {
				printf("%s\n", stdOut)
			}
		} else {
			if ((g_verbose & VERBOSE_SUCCESS) == VERBOSE_SUCCESS) {
				printf("#%s%d | success | %dms | '%s' | expected %s (%d) | got %s (%d)\n",
					padding, g_testCount, deltaMs, cmd, prettyCxCode(exitCode), exitCode, prettyCxCode(cmdError), cmdError)
			}
			g_testSuccess = g_testSuccess + 1
		}
		g_testCount = g_testCount + 1
	} else {
		if ((g_verbose & VERBOSE_SKIPPED) == VERBOSE_SKIPPED) {
			printf("#--- | Skipped |  0ms | '%s' | %s\n", cmd, desc)
		}
		g_testSkipped = g_testSkipped + 1
	}
}

func runTest(cmd str, exitCode i32, desc str) {
	runTestEx(cmd, exitCode, desc, TEST_STABLE, 0)
}

func help () {
	printf("Options:\n")
	printf("++help          : Prints this message.\n")
	printf("++enable-tests  : Enable test set (all, stable, issue, gui).\n")
	printf("++disable-tests : Disable test set (all, stable, issue, gui).\n")
	printf("++verbose       : Set verbose mode (flags).\n")
	printf("              0 | none\n")
	printf("              1 | log success only\n")
	printf("              2 | log stdout and stderr\n")
	printf("              4 | log failure\n")
	printf("              8 | log skipped tests\n")
	printf("             15 | full log\n")
	printf("++cxpath        : Set cx directory\n")
	printf("++wdir          : Set working directory\n")
}

func main ()() {
	var argCount i32 = len(os.Args)

	var workingDirMatch bool = false
	var cxPathMatch bool = false
	var verboseMatch bool = false
	var helpMatch bool = false

	var enabledTests i32 = 0
	var disabledTests i32 = 0

	for a := 0; a < argCount; a++ {
		var arg str = os.Args[a]
		if getArgValueStr(arg, "++wdir=", &g_workingDir, &workingDirMatch) {
			continue
		}

		if getArgValueStr(arg, "++cxpath=", &g_cxPath, &cxPathMatch) {
			continue
		}

		if getArgValueI32(arg, "++verbose=", &g_verbose, &verboseMatch) {
			if g_verbose < VERBOSE_NONE || g_verbose > VERBOSE_FULL{
				printf("invalid option value %s\n", arg)
				os.Exit(cx.PANIC)
			}
			continue
		}

		if addTestFlags(arg, "++enable-tests=", &enabledTests) {
			continue
		}

		if addTestFlags(arg, "++disable-tests=", &disabledTests) {
			continue
		}

		if matchArg(arg, "++help", &helpMatch) {
			help()
			os.Exit(0)
		}

		printf("invalid argument : %s\n", arg)
		os.Exit(cx.PANIC)
	}

	if enabledTests == TEST_ALL && disabledTests == TEST_ALL {
		printf("Invalid test combination :\n")
		printTestFlags("++enabled-test=", enabledTests)
		printTestFlags("++disabled-tests=", disabledTests)
		os.Exit(cx.PANIC)
	} else if disabledTests == TEST_ALL {
		g_enabledTests = enabledTests
	} else {
		g_enabledTests = (g_enabledTests | enabledTests) & (-1 ^ disabledTests)
	}

	printf("\nRunning CX tests in dir : '%s'\n", g_workingDir)
	printTestFlags("Enabled tests", g_enabledTests)

	var start i64
	start = time.UnixMilli()

	// tests
	runTest("test-i32.cx", cx.SUCCESS, "i32")
	runTest("test-i64.cx", cx.SUCCESS, "i64")
	runTest("test-f32.cx", cx.SUCCESS, "f32")
	runTest("test-f64.cx", cx.SUCCESS, "f64")
	runTest("test-bool.cx", cx.SUCCESS, "bool")
	runTest("test-array.cx", cx.SUCCESS, "array")
	runTest("test-function.cx", cx.SUCCESS, "function")
	runTest("test-control-flow.cx", cx.SUCCESS, "control floow")
	runTest("test-utils.cx test-struct.cx", cx.SUCCESS, "struct")
	runTest("test-str.cx", cx.SUCCESS, "str")
	runTest("test-utils.cx test-pointers.cx", cx.SUCCESS, "pointers")
	runTest("test-slices.cx", cx.SUCCESS, "slices")
	runTest("test-short-declarations.cx", cx.SUCCESS, "short declarations")
	runTest("test-parse.cx", cx.SUCCESS, "parse")
	runTest("test-collection-functions.cx", cx.SUCCESS, "collection functions")

	// issues
	runTest("issue-14.cx", cx.COMPILATION_ERROR, "Type casting error not reported.")
	runTestEx("issue-15.cx", cx.COMPILATION_ERROR, "Panic if return value is not used.", TEST_GUI | TEST_STABLE, 0)
	runTest("issue-18.cx", cx.SUCCESS, "String not working across packages")
	runTest("issue-19a.cx issue-19.cx", cx.SUCCESS, "Order of files matters for structs")
	runTest("issue-19.cx issue-19a.cx", cx.SUCCESS, "Order of files matters for structs")
	runTestEx("issue-23.cx", cx.COMPILATION_ERROR, "Panic when calling gl.BindBuffer with only one argument.", TEST_GUI | TEST_STABLE, 0)
	runTestEx("issue-24.cx", cx.SUCCESS, "Panic when giving []f32 argument to gl.BufferData", TEST_GUI | TEST_STABLE, 0)
	runTest("issue-25.cx", cx.SUCCESS, "Struct field crushed")
	runTest("issue-26.cx", cx.SUCCESS, "Failed to modify value in an array")
	runTest("issue-27.cx", cx.SUCCESS, "Panic when trying to index (using a var) an array, member of a struct passed as a function argument")
	runTest("issue-28.cx", cx.SUCCESS, "Can't call method from package")
	runTest("issue-29.cx", cx.SUCCESS, "Can't call method if it has a parameter")
	runTest("issue-30.cx", cx.SUCCESS, "Panic when using arithmetic to index an array field of a struct")
	runTestEx("issue-32.cx", cx.SUCCESS, "Panic if return value is used in an expression", TEST_ISSUE, 0)
	runTest("issue-33.cx", cx.SUCCESS, "Using a variable to store the return boolean value of a function doesnt work with an if statement")
	runTest("issue-35.cx", cx.SUCCESS, "Panic when accessing property of struct array passed in as argument to func")
	runTest("issue-37.cx", cx.SUCCESS, "Unexpected results when accessing arrays of structs in a struct")
	runTest("issue-39.cx", cx.SUCCESS, "Inline initializations and arrays")
	runTestEx("issue-40.cx", cx.SUCCESS, "Slice keeps growing though it's cleared inside the loop", TEST_ISSUE, 0)
	runTestEx("issue-41.cx", cx.SUCCESS, "Scope not working in loops", TEST_ISSUE, 0)
	runTest("issue-48.cx", cx.SUCCESS, "Interdependant Structs")
	runTest("issue-49.cx", cx.COMPILATION_ERROR, "Panic when trying to access an invalid field.")
	runTestEx("issue-50.cx", cx.COMPILATION_ERROR, "No compilation error when using an using an invalid identifier", TEST_ISSUE, 0)
	runTestEx("issue-51a.cx issue-51.cx", cx.SUCCESS, "Silent name clash between packages", TEST_ISSUE, 0)
	runTestEx("issue-51.cx issue-51a.cx", cx.SUCCESS, "Silent name clash between packages", TEST_ISSUE, 0)
	runTestEx("issue-52.cx", cx.COMPILATION_ERROR, "Invalid implicit cast.", TEST_ISSUE, 0)
	runTestEx("issue-53.cx", cx.SUCCESS, "Panic when using +* in an expression", TEST_ISSUE, 0)
	runTestEx("issue-54.cx", cx.COMPILATION_ERROR, "No compilation error when defining a struct with duplicate fields.", TEST_ISSUE, 0)
	runTestEx("issue-55.cx", cx.SUCCESS, "Can't define struct with a single character identifier.", TEST_ISSUE, 0)
	runTest("issue-56.cx", cx.SUCCESS, "Panic when variable used in if statement without parenthesis.")
	runTest("issue-57.cx", cx.SUCCESS, "Struct field stomped")
	runTestEx("issue-58.cx", cx.COMPILATION_ERROR, "No compilation error when indexing an array with a non integral var.", TEST_ISSUE, 0)
	runTestEx("issue-59.cx", cx.SUCCESS, "Panic when a field of a struct returned by a function is used in an expression", TEST_ISSUE, 0)
	runTest("issue-60a.cx issue-60.cx", cx.COMPILATION_ERROR, "No compilation error when using var without package qualification.")
	runTest("issue-61.cx", cx.SUCCESS, "No compilation error when passing *i32 as an i32 arg and conversely")
	runTestEx("issue-61a.cx", cx.COMPILATION_ERROR, "No compilation error when passing *i32 as an i32 arg and conversely", TEST_ISSUE, 0)
	runTestEx("issue-62.cx", cx.COMPILATION_ERROR, "No compilation error when dereferencing an i32 var.", TEST_ISSUE, 0)
	runTestEx("issue-63.cx", cx.SUCCESS, "Wrong pointer behaviour.", TEST_ISSUE, 0)
	runTestEx("issue-65.cx", cx.SUCCESS, "Return from a function doesnt work", TEST_ISSUE, 0)
	runTestEx("issue-67.cx", cx.COMPILATION_ERROR, "No compilation error when var is accessed outside of its declaring scope", TEST_ISSUE, 0)
	runTest("issue-68.cx", cx.COMPILATION_ERROR, "Panic when a str var is shadowed by a struct var in another scope")
	runTestEx("issue-70.cx", cx.SUCCESS, "Inline field and index 'dereferences' to function calls' outputs", TEST_ISSUE, 0)
	runTest("issue-71.cx", cx.COMPILATION_ERROR, "No compilation error when redeclaring a variable")
	runTestEx("issue-72.cx", cx.SUCCESS, "Multi-dimensional slices don't work", TEST_ISSUE, 0)
	runTestEx("issue-75.cx", cx.SUCCESS, "can't prefix a (f32) variable with minus to flip it's signedness", TEST_ISSUE, 0)
	runTest("issue-78.cx", cx.COMPILATION_ERROR, "struct identifier (when initializing fields) can be with or without a '&' prefix, with no CX error")
	runTest("issue-79.cx", cx.COMPILATION_ERROR, "can assign to previously undeclared vars with just '='")
	runTestEx("issue-82.cx", cx.SUCCESS, "empty code blocks (even if they contain commented-out lines) crash like this", TEST_ISSUE, 0)
	runTest("issue-84.cx", cx.SUCCESS, "increment operator ++ does not work")
	runTest("issue-85.cx", cx.SUCCESS, "Method does not work")
	runTest("issue-86.cx", cx.SUCCESS, "Cannot use bool variable in if expression")
	runTest("issue-88.cx", cx.SUCCESS, "CX Parser does not recognize method")
	runTest("issue-90.cx", cx.SUCCESS, "Goto not working on windows")
	runTest("issue-91.cx", cx.SUCCESS, "Methods with pointer receivers don't work")
	runTestEx("issue-93.cx", cx.SUCCESS, "when using 2 f32 out parameters, only the value of the 2nd gets through", TEST_GUI | TEST_STABLE, 0)
	runTest("issue-98.cx", cx.COMPILATION_ERROR, "Variable redeclaration should not be allowed")
	runTestEx("issue-99.cx", cx.SUCCESS, "Short variable declarations are not working with calls to methods or functions", TEST_ISSUE, 0)
	runTestEx("issue-101.cx", cx.SUCCESS, "Panic when using equality operator between a bool and an i32", TEST_ISSUE, 0)
	runTestEx("issue-102.cx", cx.SUCCESS, "String concatenation using the + operator doesn't work", TEST_ISSUE, 0)
	runTest("issue-103.cx", cx.SUCCESS, "Argument list is not parsed correctly")
	runTestEx("issue-104.cx", cx.SUCCESS, "Dubious error message when indexing an array with a substraction expression", TEST_ISSUE, 0)
	runTestEx("issue-105.cx", cx.SUCCESS, "Dubious error message when inline initializing a slice", TEST_ISSUE, 0)
	runTest("issue-106a.cx issue-106.cx", cx.SUCCESS, "Troubles when accessing a global var from another package")
	runTestEx("issue-108.cx", cx.SUCCESS, "same func names (but in different packages) collide", TEST_ISSUE, 0)
	runTest("issue-111.cx", cx.COMPILATION_ERROR, "can use vars from other packages without a 'packageName.' prefix")
	runTest("issue-120.cx", cx.SUCCESS, "False positive when detecting variable redeclaration.")
	runTestEx("issue-120a.cx", cx.SUCCESS, "False positive when detecting variable redeclaration.", TEST_ISSUE, 0)
	runTestEx("issue-120b.cx", cx.SUCCESS, "False positive when detecting variable redeclaration.", TEST_ISSUE, 0)
	runTest("issue-131.cx", cx.SUCCESS, "Problem with struct literals in short variable declarations")
	runTestEx("issue-132.cx", cx.SUCCESS, "Panic when using the return value of a function in a short declaration", TEST_ISSUE, 0)
	runTestEx("issue-133.cx", cx.COMPILATION_ERROR, "Panic when inserting a new line in a string literal", TEST_ISSUE, 0)
	runTestEx("issue-134.cx", cx.COMPILATION_ERROR, "Panic when declaring a variable of an unknown type", TEST_ISSUE, 0)
	runTestEx("issue-135.cx", cx.COMPILATION_ERROR, "No compilation error when using arithmetic operators on struct instances", TEST_ISSUE, 0)
	runTestEx("issue-141.cx", cx.SUCCESS, "Parser gets confused with `2 -2`", TEST_ISSUE, 0)
	runTestEx("issue-153.cx", cx.SUCCESS, "Panic in when assigning an empty initializer list to a []i32 variable", TEST_ISSUE, 0)
	runTestEx("issue-154.cx", cx.SUCCESS, "Cx stack overflow when appending to a slice passed by address", TEST_ISSUE, 0)
	runTestEx("issue-155.cx", cx.COMPILATION_ERROR, "Panic when trying to assign return value of a function returning void", TEST_ISSUE, 0)

	var end i64
	end = time.UnixMilli()

	printf("\nTests finished after %d milliseconds\n", i64.sub(end, start))
	printf("A total of %d tests were performed\n", g_testCount)
	printf("%d were successful\n", g_testSuccess)
	printf("%d failed\n", g_testCount - g_testSuccess)
	printf("%d skipped\n", g_testSkipped)

	if g_testCount == 0 || (g_testSuccess != g_testCount) {
		os.Exit(cx.PANIC)
	}
}
