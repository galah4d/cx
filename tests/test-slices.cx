package main

func printSliceI32(msg str, a []i32) {
	printf("%s : {", msg)
	for i := 0; i < len(a); i++ {
		printf("%d, ", a[i])
	}
	printf("}\n")
}

func printSliceStr(msg str, a []str) {
	printf("%s : {", msg)
	for i := 0; i < len(a); i++ {
		printf("'%s', ", a[i])
	}
	printf("}\n")
}

func testSliceI32(a []i32, b []i32, msg str) {
	//printSliceI32("a", a)
	//printSliceI32("b", b)
	if assert(len(a), len(b), msg) {
		for i := 0; i < len(a); i++ {
			test(a[i], b[i], msg)
		}
	}
}

func testSliceStr(a []str, b []str, msg str) {
	//printSliceStr("a", a)
	//printSliceStr("b", b)
	if assert(len(a), len(b), msg) {
		for i := 0; i < len(a); i++ {
			if a[i] != b[i] {
				test(false, true, msg)
			}
		}
	}
}

func testAppend() {
	var slc []i32
	slc = append(slc, 11)
	slc = append(slc, 12)
	slc = append(slc, 13)
	slc = append(slc, 14)
	slc = append(slc, 15)
	slc = append(slc, 16)

	test(len(slc), 6, "")

	test(slc[0], 11, "")
	test(slc[1], 12, "")
	test(slc[2], 13, "")
	test(slc[3], 14, "")
	test(slc[4], 15, "")
	test(slc[5], 16, "")

	var slc2 []i32
	slc2 = slc

	test(slc2[0], 11, "")
	test(slc2[1], 12, "")
	test(slc2[2], 13, "")
	test(slc2[3], 14, "")
	test(slc2[4], 15, "")
	test(slc2[5], 16, "")

	test(len(slc2), 6, "")

	var slc3 []i32
	slc3 = []i32{21, 22, 23, 24, 25}

	test(slc3[0], 21, "")
	test(slc3[1], 22, "")
	test(slc3[2], 23, "")
	test(slc3[3], 24, "")
	test(slc3[4], 25, "")

	test(len(slc3), 5, "")

	var slc4 []i32
	slc4 = append(slc3, 26)

	test(slc4[0], 21, "")
	test(slc4[1], 22, "")
	test(slc4[2], 23, "")
	test(slc4[3], 24, "")
	test(slc4[4], 25, "")
	test(slc4[5], 26, "")

	test(len(slc4), 6, "")

	var num i32
	num = slc4[5]

	test(num, 26, "")
	test(num, slc4[5], "")

	var slc5 []f32
	slc5 = append(slc5, 1.1)
	slc5 = append(slc5, 1.2)
	slc5 = append(slc5, 1.3)

	test(slc5[0], 1.1, "")
	test(slc5[1], 1.2, "")
	test(slc5[2], 1.3, "")

	test(len(slc5), 3, "")

	slc5 = []f32{11.11, 12.12, 13.13, 14.14}

	test(slc5[0], 11.11, "")
	test(slc5[1], 12.12, "")
	test(slc5[2], 13.13, "")
	test(slc5[3], 14.14, "")

	test(len(slc5), 4, "")

	var slc6 []i64
	slc6 = append(slc6, 11L)
	slc6 = append(slc6, 12L)
	slc6 = append(slc6, 13L)

	test(slc6[0], 11L, "")
	test(slc6[1], 12L, "")
	test(slc6[2], 13L, "")

	slc6 = []i64{11L, 12L, 13L, 14L}

	test(slc6[0], 11L, "")
	test(slc6[1], 12L, "")
	test(slc6[2], 13L, "")
	test(slc6[3], 14L, "")

	var slc7 []f64
	slc7 = append(slc7, 11.11D)
	slc7 = append(slc7, 12.12D)
	slc7 = append(slc7, 13.13D)

	test(slc7[0], 11.11D, "")
	test(slc7[1], 12.12D, "")
	test(slc7[2], 13.13D, "")

	slc7 = []f64{11.11D, 12.12D, 13.13D, 14.14D}

	test(slc7[0], 11.11D, "")
	test(slc7[1], 12.12D, "")
	test(slc7[2], 13.13D, "")
	test(slc7[3], 14.14D, "")

	var slc8 []bool
	slc8 = append(slc8, true)
	slc8 = append(slc8, false)
	slc8 = append(slc8, true)

	test(slc8[0], true, "")
	test(slc8[1], false, "")
	test(slc8[2], true, "")

	slc8 = []bool{false, true, true, true, false, true}

	test(slc8[0], false, "")
	test(slc8[1], true, "")
	test(slc8[2], true, "")
	test(slc8[3], true, "")
	test(slc8[4], false, "")
	test(slc8[5], true, "")

	var slc10 []bool
	slc10 = append(slc10, true)
	slc10 = append(slc10, false)
	slc10 = append(slc10, true)

	test(slc10[0], true, "")
	test(slc10[1], false, "")
	test(slc10[2], true, "")

	slc10 = []bool{false, true, true, true, false, true}

	test(slc10[0], false, "")
	test(slc10[1], true, "")
	test(slc10[2], true, "")
	test(slc10[3], true, "")
	test(slc10[4], false, "")
	test(slc10[5], true, "")

	var slc9 []byte
	slc9 = append(slc9, 15B)
	slc9 = append(slc9, 20B)
	slc9 = append(slc9, 35B)

	test(slc9[0], 15B, "")
	test(slc9[1], 20B, "")
	test(slc9[2], 35B, "")

	slc9 = []byte{90B, 95B, 100B, 105B, 110B, 115B}

	test(slc9[0], 90B, "")
	test(slc9[1], 95B, "")
	test(slc9[2], 100B, "")
	test(slc9[3], 105B, "")
	test(slc9[4], 110B, "")
	test(slc9[5], 115B, "")

	var slc11 []str
	slc11 = append(slc11, "hello world", "")
	slc11 = append(slc11, "bye oh cruel world", "")

	test(slc11[0], "hello world", "")
	test(slc11[1], "bye oh cruel world", "")

	var slc12 []str
	slc12 = append(slc11, "1", "")
	slc12 = append(slc12, "22", "")

	test(slc12[0], "hello world", "")
	test(slc12[1], "bye oh cruel world", "")
	test(slc12[2], "1", "")
	test(slc12[3], "22", "")
}

func testResize() {
	var ia []i32
	ia = resize(ia, 0)
	test(len(ia), 0, "")

	ia = []i32{0, 1, 2, 3, 4, 5, 6 }
	test(ia[4], 4, "")

	ia = resize(ia, 4)
	test(len(ia), 4, "")
	test(ia[3], 3, "")

	ia = resize(ia, 0)
	test(len(ia), 0, "")

	var ib []i32
	ib = resize(ib, 10)
	test(len(ib), 10, "")
	ib[6] = 66
	test(ib[6], 66, "")

	var ic []i32
	ic = resize(ic, 7)
	test(len(ic), 7, "")

	var id []str
	id = resize(id, 5)
	test(len(id), 5, "")
}

func testCopy() {
	var count i32
	var ia []i32
	var ib []i32
	count = copy(ia, ib)
	test(count, 0, "")
	testSliceI32(ia, ib, "")

	var ic []i32
	ic = []i32 {1, 2, 3, 4}

	var id []i32
	id = resize(id, 4)
	count = copy(id, ic)
	test(count, 4, "fuck")
	testSliceI32(id, ic, "")

	var ie []i32
	ie = []i32 {5, 6}
	count = copy(id, ie)
	test(count, 2, "")
	var testid []i32
	testid = []i32{ 5, 6, 3, 4}
	testSliceI32(id, testid, "")

	count = copy(id, ic)
	test(count, 4, "")
	count = copy(ie, id)
	test(count, 2, "")
	var testie []i32
	testie = []i32{1, 2}
	testSliceI32(ie, testie, "")

	var sa []str
	var sb []str
	count = copy(sa, sb)
	test(count, 0, "")
	testSliceStr(sa, sb, "")

	var sc []str
	sc = []str {"a", "bb", "ccc", "dddd"}

	var sd []str
	sd = resize(sd, 4)
	count = copy(sd, sc)
	test(count, 4, "")
	testSliceStr(sd, sc, "")

	var se []str
	se = []str {"eeeee", "ffffff"}
	count = copy(sd, se)
	test(count, 2, "")
	var testsd []str
	testsd = []str{ "eeeee", "ffffff", "ccc", "dddd"}
	testSliceStr(sd, testsd, "")

	count = copy(sd, sc)
	test(count, 4, "")
	count = copy(se, sd)
	test(count, 2, "")
	var testse []str
	testse = []str{"a", "bb"}
	testSliceStr(se, testse, "")
}

func testInsert() {
	var testi []i32
	testi = []i32{0, 1, 2, 3}

	var ia []i32
	ia = []i32{1, 2, 3}
	ia = insert(ia, 0, 0)
	testSliceI32(ia, testi, "")

	var ib []i32
	ib = []i32{0, 2, 3}
	ib = insert(ib, 1, 1)
	testSliceI32(ib, testi, "")

	var ic []i32
	ic = []i32{0, 1, 3}
	ic = insert(ic, 2, 2)
	testSliceI32(ic, testi, "")

	var id []i32
	id = []i32{0, 1, 2}
	id = insert(id, 3, 3)
	testSliceI32(id, testi, "")

	var ie []i32
	var ig []i32
	ig = []i32{4}
	ie = insert(ie, 0, 4)
	testSliceI32(ie, ig, "")

	var tests []str
	tests = []str {"a", "bb", "ccc", "dddd"}

	var sa []str
	sa = []str {"bb", "ccc", "dddd"}
	sa = insert(sa, 0, "a")
	testSliceStr(sa, tests, "")

	var sb []str
	sb = []str {"a", "ccc", "dddd"}
	sb = insert(sb, 1, "bb")
	testSliceStr(sb, tests, "")

	var sc []str
	sc = []str {"a", "bb", "dddd"}
	sc = insert(sc, 2, "ccc")
	testSliceStr(sc, tests, "")

	var sd []str
	sd = []str {"a", "bb", "ccc"}
	sd = insert(sd, 3, "dddd")
	testSliceStr(sd, tests, "")

	var se []str
	var sg []str
	sg = []str{"4"}
	se = insert(se, 0, "4")
	testSliceStr(se, sg, "")
}

func testRemove() {
	var testi []i32
	testi = []i32{1, 2, 3}

	var ia []i32
	ia = []i32{0, 1, 2, 3}
	ia = remove(ia, 0)
	testSliceI32(ia, testi, "")

	var ib []i32
	ib = []i32{1, 0, 2, 3}
	ib = remove(ib, 1)
	testSliceI32(ib, testi, "")

	var ic []i32
	ic = []i32{1, 2, 0, 3}
	ic = remove(ic, 2)
	testSliceI32(ic, testi, "")

	var id []i32
	id = []i32{1, 2, 3, 0}
	id = remove(id, 3)
	testSliceI32(id, testi, "")


	var tests []str
	tests = []str {"bb", "ccc", "dddd"}

	var sa []str
	sa = []str {"a", "bb", "ccc", "dddd"}
	sa = remove(sa, 0)
	testSliceStr(sa, tests, "")

	var sb []str
	sb = []str {"bb", "a", "ccc", "dddd"}
	sb = remove(sb, 1)
	testSliceStr(sb, tests, "")

	var sc []str
	sc = []str {"bb", "ccc", "a", "dddd"}
	sc = remove(sc, 2)
	testSliceStr(sc, tests, "")

	var sd []str
	sd = []str {"bb", "ccc", "dddd", "a"}
	sd = remove(sd, 3)
	testSliceStr(sd, tests, "")
}

func main () {
	testAppend()
	testResize()
	testCopy()
	testInsert()
	testRemove()
}
